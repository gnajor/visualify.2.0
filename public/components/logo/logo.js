export class Logo{
    constructor(parent, width, height){
        this.parent = parent;
        this.wSvg = width;
        this.hSvg = height;
        this.marginBottom = 17;
        this.data = [0.7, 0.25, 0.5];
        this.newData = [1, 0.25, 0.8];
        this.counter = 0;

        this.init();
    }

    init(){
        this.parent.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 350 80" preserveAspectRatio="xMidYMid meet" width=${this.wSvg} height=${this.hSvg} fill="none">
                                    <path d="M15.5682 3.81818L29.6307 48.0227H30.1705L44.2614 3.81818H57.8977L37.8409 62H21.9886L1.90341 3.81818H15.5682ZM64.6733 62V18.3636H76.7756V62H64.6733ZM70.7528 12.7386C68.9536 12.7386 67.41 12.142 66.1222 10.9489C64.8532 9.73674 64.2188 8.28788 64.2188 6.60227C64.2188 4.9356 64.8532 3.50568 66.1222 2.3125C67.41 1.10038 68.9536 0.494315 70.7528 0.494315C72.5521 0.494315 74.0862 1.10038 75.3551 2.3125C76.643 3.50568 77.2869 4.9356 77.2869 6.60227C77.2869 8.28788 76.643 9.73674 75.3551 10.9489C74.0862 12.142 72.5521 12.7386 70.7528 12.7386ZM122.777 30.8068L111.697 31.4886C111.508 30.5417 111.101 29.6894 110.476 28.9318C109.851 28.1553 109.027 27.5398 108.004 27.0852C107 26.6117 105.798 26.375 104.396 26.375C102.521 26.375 100.94 26.7727 99.652 27.5682C98.3641 28.3447 97.7202 29.3864 97.7202 30.6932C97.7202 31.7348 98.1368 32.6155 98.9702 33.3352C99.8035 34.0549 101.233 34.6326 103.26 35.0682L111.158 36.6591C115.4 37.5303 118.563 38.9318 120.646 40.8636C122.73 42.7955 123.771 45.3333 123.771 48.4773C123.771 51.3371 122.929 53.8466 121.243 56.0057C119.576 58.1648 117.285 59.8504 114.368 61.0625C111.47 62.2557 108.127 62.8523 104.339 62.8523C98.563 62.8523 93.9607 61.6496 90.5327 59.2443C87.1236 56.8201 85.1255 53.5246 84.5384 49.358L96.4418 48.733C96.8016 50.4943 97.6728 51.839 99.0554 52.767C100.438 53.6761 102.209 54.1307 104.368 54.1307C106.489 54.1307 108.194 53.7235 109.482 52.9091C110.788 52.0758 111.451 51.0057 111.47 49.6989C111.451 48.6004 110.987 47.7008 110.078 47C109.169 46.2803 107.768 45.7311 105.874 45.3523L98.3168 43.8466C94.0554 42.9943 90.883 41.517 88.7997 39.4148C86.7353 37.3125 85.7031 34.6326 85.7031 31.375C85.7031 28.572 86.4607 26.1572 87.9759 24.1307C89.5099 22.1042 91.6596 20.5417 94.4247 19.4432C97.2088 18.3447 100.466 17.7955 104.197 17.7955C109.709 17.7955 114.046 18.9602 117.209 21.2898C120.391 23.6193 122.247 26.7917 122.777 30.8068ZM199.382 62.8239C196.598 62.8239 194.117 62.3409 191.939 61.375C189.761 60.3902 188.037 58.9413 186.768 57.0284C185.518 55.0966 184.893 52.6913 184.893 49.8125C184.893 47.3883 185.339 45.3523 186.229 43.7045C187.119 42.0568 188.331 40.7311 189.865 39.7273C191.399 38.7235 193.142 37.9659 195.092 37.4545C197.062 36.9432 199.126 36.5833 201.286 36.375C203.823 36.1098 205.869 35.8636 207.422 35.6364C208.975 35.3902 210.102 35.0303 210.803 34.5568C211.503 34.0833 211.854 33.3826 211.854 32.4545V32.2841C211.854 30.4848 211.286 29.0928 210.149 28.108C209.032 27.1231 207.441 26.6307 205.376 26.6307C203.198 26.6307 201.465 27.1136 200.178 28.0795C198.89 29.0265 198.037 30.2197 197.621 31.6591L186.428 30.75C186.996 28.0985 188.113 25.8068 189.78 23.875C191.446 21.9242 193.596 20.428 196.229 19.3864C198.88 18.3258 201.948 17.7955 205.433 17.7955C207.857 17.7955 210.178 18.0795 212.393 18.6477C214.628 19.2159 216.607 20.0966 218.331 21.2898C220.073 22.483 221.446 24.017 222.45 25.892C223.454 27.7481 223.956 29.9735 223.956 32.5682V62H212.479V55.9489H212.138C211.437 57.3125 210.5 58.5152 209.325 59.5568C208.151 60.5795 206.74 61.3845 205.092 61.9716C203.445 62.5398 201.541 62.8239 199.382 62.8239ZM202.848 54.4716C204.628 54.4716 206.2 54.1212 207.564 53.4205C208.928 52.7008 209.998 51.7348 210.774 50.5227C211.551 49.3106 211.939 47.9375 211.939 46.4034V41.7727C211.56 42.0189 211.039 42.2462 210.376 42.4545C209.732 42.6439 209.003 42.8239 208.189 42.9943C207.375 43.1458 206.56 43.2879 205.746 43.4205C204.931 43.5341 204.193 43.6383 203.53 43.733C202.109 43.9413 200.869 44.2727 199.808 44.7273C198.748 45.1818 197.924 45.7973 197.337 46.5739C196.75 47.3314 196.456 48.2784 196.456 49.4148C196.456 51.0625 197.053 52.322 198.246 53.1932C199.458 54.0455 200.992 54.4716 202.848 54.4716ZM245.447 3.81818V62H233.345V3.81818H245.447ZM255.142 62V18.3636H267.244V62H255.142ZM261.222 12.7386C259.422 12.7386 257.879 12.142 256.591 10.9489C255.322 9.73674 254.688 8.28788 254.688 6.60227C254.688 4.9356 255.322 3.50568 256.591 2.3125C257.879 1.10038 259.422 0.494315 261.222 0.494315C263.021 0.494315 264.555 1.10038 265.824 2.3125C267.112 3.50568 267.756 4.9356 267.756 6.60227C267.756 8.28788 267.112 9.73674 265.824 10.9489C264.555 12.142 263.021 12.7386 261.222 12.7386ZM300.405 18.3636V27.4545L273.473 27.4545V18.3636L300.405 18.3636ZM279.638 62V15.2102C279.638 12.0473 280.253 9.42424 281.484 7.34091C282.734 5.25757 284.439 3.69507 286.598 2.65341C288.757 1.61174 291.21 1.09091 293.956 1.09091C295.812 1.09091 297.507 1.23295 299.041 1.51705C300.594 1.80114 301.75 2.05682 302.507 2.28409L300.348 11.375C299.875 11.2235 299.287 11.0814 298.587 10.9489C297.905 10.8163 297.204 10.75 296.484 10.75C294.704 10.75 293.464 11.1667 292.763 12C292.062 12.8144 291.712 13.9602 291.712 15.4375V62H279.638ZM315.27 78.3636C313.736 78.3636 312.296 78.2405 310.952 77.9943C309.626 77.767 308.527 77.4735 307.656 77.1136L310.384 68.0795C311.804 68.5152 313.082 68.7519 314.219 68.7898C315.374 68.8277 316.368 68.5625 317.202 67.9943C318.054 67.4261 318.745 66.4602 319.276 65.0966L319.986 63.25L304.332 18.3636H317.06L326.094 50.4091H326.548L335.668 18.3636L348.48 18.3636L331.52 66.7159C330.705 69.0644 329.598 71.1098 328.196 72.8523C326.813 74.6136 325.062 75.9678 322.94 76.9148C320.819 77.8807 318.262 78.3636 315.27 78.3636Z" fill="#1ED760"/>
                                </svg>`;
        
        this.svg = d3.select("#" + this.parent.id + " svg");  

        this.prepScales();
        this.renderRects();
    }

    renderRects(){
        this.rects = this.svg.selectAll("rect")
            .data(this.data)
            .enter()
            .append("rect")
                .attr("fill", "#BB87FE")
                .attr("x", d => this.xScale(d))
                .attr("y", d => this.yScale(d))
                .attr("width", d => this.xScale.bandwidth())
                .attr("height", d => this.hScale(d))
    }

    prepScales(){
        const pathHeight = this.svg.select("path").node().getBBox().height;

        this.xScale =  d3.scaleBand()
            .domain(this.data)
            .range([131, 180])
            .paddingInner(0.3)

        this.yScale = d3.scaleLinear()
            .domain([0, 1])
            .range([pathHeight - this.marginBottom, 0])

        this.hScale = d3.scaleLinear()
            .domain([0, 1])
            .range([0, pathHeight - this.marginBottom])
    }

    initAnimation(){
        const time = 1000;

        setInterval(() => {
            let data = this.data;

            if(this.counter % 2 === 0)data = this.newData;
            

            const newXScale = d3.scaleBand()
            .domain(data)
            .range([131, 180])
            .paddingInner(0.3)

            const rects = this.svg.selectAll("rect")
                .data(data);

            rects.transition()
                .duration(time)
                .ease(d3.easeSinInOut)
                .delay((d, i) => i * 200)
                .attr("x", d => newXScale(d))
                .attr("y", d => this.yScale(d))
                .attr("width", newXScale.bandwidth())
                .attr("height", d => this.hScale(d));

            this.counter++;
        }, time * 0.7)
    }
}